name: Provision Infra (EKS + ECR)

on:
  workflow_dispatch:   # manual trigger only

jobs:
  provision:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Check and handle ROLLBACK_COMPLETE state
      - name: Check Stack Status
        id: check-stack
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name product-assistant-cluster \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Stack status: $STACK_STATUS"
          echo "status=$STACK_STATUS" >> $GITHUB_OUTPUT

      # Delete stack if in ROLLBACK_COMPLETE state
      - name: Delete Stack if in ROLLBACK_COMPLETE
        if: steps.check-stack.outputs.status == 'ROLLBACK_COMPLETE'
        run: |
          echo "Stack is in ROLLBACK_COMPLETE state. Deleting..."
          aws cloudformation delete-stack \
            --stack-name product-assistant-cluster \
            --region ${{ secrets.AWS_REGION }}
          
          echo "Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete \
            --stack-name product-assistant-cluster \
            --region ${{ secrets.AWS_REGION }}
          
          echo "Stack deleted successfully"

      # Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        id: deploy
        continue-on-error: true
        run: |
          aws cloudformation deploy \
            --stack-name product-assistant-cluster \
            --template-file infra/eks-with-ecr.yaml \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }}

      # Show stack events if deployment failed
      - name: Show Stack Events on Failure
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "=== CloudFormation Stack Events ==="
          aws cloudformation describe-stack-events \
            --stack-name product-assistant-cluster \
            --region ${{ secrets.AWS_REGION }} \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED` || ResourceStatus==`DELETE_FAILED`].[Timestamp,ResourceType,LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
            --output table
          
          echo ""
          echo "=== All Recent Events ==="
          aws cloudformation describe-stack-events \
            --stack-name product-assistant-cluster \
            --region ${{ secrets.AWS_REGION }} \
            --max-items 20 \
            --query 'StackEvents[].[Timestamp,ResourceType,LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
            --output table

      # Fail the job if deployment failed
      - name: Check Deployment Result
        if: steps.deploy.outcome == 'failure'
        run: exit 1