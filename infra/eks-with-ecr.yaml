AWSTemplateFormatVersion: 2010-09-09
Description: Free Tier Optimized EKS Cluster with NodeGroup and ECR Repository

Parameters:
  ClusterName:
    Type: String
    Default: product-assistant-cluster-latest
    Description: Name of the EKS cluster
  
  NodeInstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for the node group (t2.micro is free tier eligible)
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
      - t3.medium
  
  DesiredCapacity:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 3
    Description: Desired number of worker nodes (reduced for cost optimization)
  
  ECRRepositoryName:
    Type: String
    Default: product-assistant
    Description: Name of the ECR repository
  
  EnableSpotInstances:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Use spot instances to reduce costs (not recommended for production)

Conditions:
  UseSpotInstances: !Equals [!Ref EnableSpotInstances, "true"]

Resources:
  ### --- VPC ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-IGW"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets in different AZs for high availability
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicSubnet1"
        - Key: kubernetes.io/role/elb
          Value: "1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicSubnet2"
        - Key: kubernetes.io/role/elb
          Value: "1"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ### --- Security Group for EKS ---
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster communication
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-SecurityGroup"

  # Self-referencing rule for cluster internal communication
  EKSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EKSSecurityGroup
      Description: Allow all traffic within security group

  ### --- ECR Repository ---
  ProductAssistantECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-ECR"

  ### --- IAM Role for EKS Cluster ---
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-EKSClusterRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-EKSClusterRole"

  ### --- EKS Cluster ---
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: "1.28"
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
        EndpointConfigPrivate: false
        EndpointConfigPublic: true
        PublicAccessCidrs: ["0.0.0.0/0"]
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  ### --- IAM Role for NodeGroup ---
  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-NodeGroupRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-NodeGroupRole"

  ### --- EKS NodeGroup ---
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Sub "${ClusterName}-workers"
      NodeRole: !GetAtt NodeGroupRole.Arn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MaxSize: 3
        MinSize: 1
      UpdateConfig:
        MaxUnavailablePercentage: 25
      InstanceTypes:
        - !Ref NodeInstanceType
      AmiType: AL2_x86_64
      CapacityType: !If [UseSpotInstances, SPOT, ON_DEMAND]
      DiskSize: 20
      ForceUpdateEnabled: false
      Labels:
        Environment: development
        NodeGroup: workers
      Tags:
        Name: !Sub "${ClusterName}-worker-nodes"
        Environment: development

Outputs:
  EKSClusterName:
    Description: Name of the EKS Cluster
    Value: !Ref ClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  EKSClusterEndpoint:
    Description: EKS Cluster API endpoint
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-ClusterEndpoint"

  EKSClusterArn:
    Description: EKS Cluster ARN
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn"

  ECRRepositoryUri:
    Description: URI of the ECR Repository
    Value: !GetAtt ProductAssistantECR.RepositoryUri
    Export:
      Name: !Sub "${AWS::StackName}-ECR-Uri"

  ECRRepositoryName:
    Description: Name of the ECR Repository
    Value: !Ref ProductAssistantECR
    Export:
      Name: !Sub "${AWS::StackName}-ECR-Name"

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-Id"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref EKSSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup-Id"

  NodeGroupRole:
    Description: NodeGroup IAM Role ARN
    Value: !GetAtt NodeGroupRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NodeGroupRole"